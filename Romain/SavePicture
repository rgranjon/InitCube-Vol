--------------------------------------------------
Code python 3-------------------------------------
--------------------------------------------------

#!/usr/bin/python3
# -*- coding: utf-8 -*
import time
from datetime import datetime
import os

def PrisePhoto(NomPhoto): #prendre une photo avec Raspistill avec délai de 5 secondes avant photo
    command = "sudo raspistill -vf -hf -t 5000 -w 1200 -h 675 -o "+ NomPhoto +" -q 100"
    os.system(command)

if (os.path.isdir("/home/pi/Pictures/photos-compteur") == False): # si le dossier pour stocker les photos n'existe pas       
   os.mkdir("/home/pi/Pictures/photos-compteur")                  # alors on crée le dossier (sur le bureau)
   os.chmod("/home/pi/Pictures/photos-compteur",0o777)            # et on change les droits pour pouvoir effacer des photos

#on génère le nom de la photo avec heure_min_sec
date_today = datetime.now()
nom_image = date_today.strftime('%y_%m_%d_%H_%M_%S')

#on déclenche la prise de photo
chemin_photo = '/home/pi/Pictures/photos-compteur/'+nom_image+'.jpeg'
PrisePhoto(chemin_photo) #Déclenchement de la prise de photo

--------------------------------------------------
Code c++ 1----------------------------------------
--------------------------------------------------

#include <ctime> // ou time.h
#include <datetime>
#include <os> // ou stdlib.h et iostream / vérifier si os existe en c++

void prisePhoto(NomPhoto) {
	string commande = "sudo raspistill -vf -hf -t 1000 -w 1200 -h 675 -o "+ NomPhoto +" -q 100";
	system(commande);
}

string chemin = "/home/pi/Picture/photoInitCube";
prisePhoto(chemin);

--------------------------------------------------
Code c++ 2----------------------------------------
--------------------------------------------------

ByteArrayOutputStream out = new ByteArrayOutputStream();
ImageIO.write(img, "PNG", out); // or "JPG", or whatever
byte[] bytes = out.toByteArray();

--------------------------------------------------
Code c++ 3---------------------------------------- // Exemple de code pour changer une image en un tableau d’octets 
--------------------------------------------------

public byte[] ImageToByteArray(System.Drawing.Image imageIn) { using (var ms = new MemoryStream()) { imageIn.Save(ms,imageIn.RawFormat); return ms.ToArray(); } }

--------------------------------------------------
Code c++ 4---------------------------------------- // Exemple de code pour convertir un object image en byte[]
--------------------------------------------------

public static byte[] converterDemo(Image x) { ImageConverter _imageConverter = new ImageConverter(); byte[] xByte = (byte[])_imageConverter.ConvertTo(x, typeof(byte[])); return xByte; }

-------------------------------------------------- // Méthode pour convertir un objet image en un tableau d'octets, sous le format PNG, qui fournit une compression sans perte
Code c++ 5---------------------------------------- // Cette méthode peut être utilisée avec la méthode Getimagefrombytearray() pour fournir une sorte de compression sans perte
--------------------------------------------------// Objet image, doit être converti au format PNG pour obtenir un tableau d'octet d’un fichier PNG contenant l’image

public static byte[] CopyImageToByteArray(Image theImage) { using (MemoryStream memoryStream = new MemoryStream()) { theImage.Save(memoryStream, ImageFormat.Png); return memoryStream.ToArray(); } }

--------------------------------------------------
Tests et idées------------------------------------
--------------------------------------------------

Struct tm {
    tm_sec int; // secondes de 0 à 61
    int tm_min; // minutes de 0 à 59
    int tm_hour; // heures de 0 à 24
    int tm_mday; // jour 1 à 31
    int tm_mon; // mois de 0 à 11
    int tm_year; // année depuis 1900
    int tm_wday; // jours depuis dimanche
    int tm_yday; // jours depuis le 1er janvier
    int tm_isdst; // heure d'été
}

struct tm * localtime (const time_t * time);

#include <iostream>
#include <ctime>
using namespace std;
int main( ) {
   // date / heure actuelle basée sur le système actuel
   time_t tmm = time(0);
   
   // convertir en forme de chaîne
   char* dt = ctime(&tmm);
   cout << "La date et l'heure locales sont: " << dt << endl;
   // convertir en tm struct pour UTC
   tm *g = gmtime(&tmm);
   dt = asctime(g);
   cout << "La date et l'heure UTC sont:"<< dt << endl;
}
