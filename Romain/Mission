^^^ : FAIT
=== : A FAIRE
@@@ : COMPLIQUÉ OU PROBLÈME

~~~~~~~~~~~~~~~~~~~~
Enregistrer les données de mission :
~~~~~~~~~~~~~~~~~~~~
	~~~~~~~~~~
	Analyser les classes SegmentVol, Ordinateur, Stockage et Reboot :
	~~~~~~~~~~

	~~~~~~~~~~
	Établir comment les classes interviendront dans le cas de la sauvegarde de missions avant envoi :
	~~~~~~~~~~
		------------------------
		SegmentVol--------------
		------------------------

		------------------------
		Ordinateur--------------
		------------------------

		------------------------
		Stockage----------------
		------------------------

		------------------------
		Reboot------------------
		------------------------

		------------------------
		Protocole---------------
		------------------------

	~~~~~~~~~~
	Identifier le format des données à enregistrer :
	~~~~~~~~~~
--------Caméra :
			- PAS AU SPRINT 1

--------Caméra IR :
			(_ = 0x20) (n = nombre qui dépend de la valeur transmise)
			[1 2 3 4 5 6 _7 _8 _9 _10 _11 _12 _13 _14_ 15] (8x cette trame) 
				1 : Rien (2 octets)
				2 : Nombre d'octets (1 octet)
				3 : Code commande : MEASURE (7 octets)
				4 : Nombre de paquets (1 octet)
				5 : Numéro de paquet (1 octet)
				6 : Type de mesure et son unité (4 octets)
				7 : Pixel n°1 en °C (n octets)
				8 : Pixel n°2 en °C (n octets)
				9 : Pixel n°3 en °C (n octets)
				10 : Pixel n°4 en °C (n octets)
				11 : Pixel n°5 en °C (n octets)
				12 : Pixel n°6 en °C (n octets)
				13 : Pixel n°7 en °C (n octets)
				14 : Pixel n°8 en °C (n octets)
				15 : Rien (2 octets)

--------Magnétomètre :
			- PAS AU SPRINT 1

	~~~~~~~~~~
	Concevoir et réaliser le module de sauvegarde des données de mission :
	~~~~~~~~~~
			→ https://jekt.space/sauvegarder-automatiquement-le-syst%C3%A8me-de-votre-raspberry-pi-9ad0ea6848b

	~~~~~~~~~~
	Concevoir et réaliser le module de redémarrage du système sur commande ou sur incident :
	~~~~~~~~~~
		Liens utiles :
			→ https://www.windtopik.fr/redemarrage-automatique-raspberry-pi/
			→ https://howchoo.com/g/zmexnjbhmjb/dont-pull-the-plug-how-to-shut-down-or-restart-your-raspberry-pi-properly
			→ https://raspberrypi.stackexchange.com/questions/74212/how-to-properly-reboot-pi-without-disconnecting-power
			→ https://linuxfr.org/forums/linux-debutant/posts/programmer-une-extinction-et-un-redemarrage-quotidien-d-un-raspberry

~~~~~~~~~~~~~~~~~~~~
Transmettre les télémesures d’instrument :
~~~~~~~~~~~~~~~~~~~~
	~~~~~~~~~~
	Analyser la classe Protocole et vérifier l’adaptabilité des méthodes de transmission des télémesures aux différents modèles de capteurs :
	~~~~~~~~~~
--------------------------------
		------------------------
		Protocole---------------
		------------------------
--------------------------------
°°°			+ Protocole() :
				→ Construire un Protocole
--------------------------------
°°°			+ virtual ~Protocole() :
				→ Détruire un Protocole
--------------------------------
===			+ char *getTableau() :
				→ 
--------------------------------
°°°			+ int getNbrePaquets() :
				→ Retourner nbrePaquets
--------------------------------
°°°			+ int getNumPaquet() :
				→ Retourner numPaquet
--------------------------------
OK			+ list<vector<char>> getReceived() :
				→ Retourner received
--------------------------------
OK			+ void setTableau(char laDataRecu[100]) :
				→ Remplir les 100 premières cases (0 à 99) du tableau tableau[i] avec les données laDataRecu[i]
--------------------------------
===			+ void setNbrePaquets(int n) :
				→ 
--------------------------------
===			+ void setNumPaquet(int n) :
				→ 
--------------------------------
===			+ void addReceived(char recu [100]) :
				→ 
--------------------------------
===			+ void detramerMessage() :
				→ 
--------------------------------
===			+ string extraireTypeMessage(int &pos) :
				→ 
--------------------------------
===			+ void extraireNombrePaquets(int &pos) :
				→ 
--------------------------------
===			+ int calculerNbrePaquetsSalve() :
				→ 
--------------------------------
===			+ string extraireTypeDataMission(int &pos) :
				→ 
--------------------------------
===			+ int extraireDataMission(list<float> &datas, list<string> &dateHours, int &pos, string typeMission) :
				→ 
--------------------------------
===			+ void supprimerPaquet() :
				→ 
--------------------------------
===			# static string ERR_CHECKSUM :
				→
--------------------------------
===			# static string ERR_FORMAT :
				→
--------------------------------
===			# static int pause :
				→
--------------------------------
===			# int nbrePaquets :
				→
--------------------------------
===			# int numPaquet :
				→
--------------------------------
===			# char tableau[100] :
				→
--------------------------------
===			# list<vector<char>> received :
				→
--------------------------------
===			# void calculerChecksum(char & PF, char & pf) :
				→
--------------------------------
===			# bool verifierChecksum() :
				→
--------------------------------
===			# void tramerMission(Message* message, int nbrePaquets, int numPaquet) :
				→
--------------------------------
===			# void tramerStatus(Message* message, int nbrePaquets, int numPaquet) :
				→
--------------------------------
===			# void tramerMesure(Message* message, int nbrePaquets, int numPaquet) :
				→
--------------------------------
===			# unsigned char calculerNombrePaquets(Message * message) :
				→
--------------------------------
OK			# void extraireCommande() :
				→ PAS CODÉ
--------------------------------
OK			# void extraireParametres() :
				→ PAS CODÉ
--------------------------------
===			# void ajouterDataOrdiBord(Message* amessage, unsigned int &aposition) :
				→
--------------------------------
===			# void ajouterDataBattery(Message* amessage, unsigned int &aposition) :
				→
--------------------------------
===			# void ajouterStatusInst(Message* amessage, unsigned int &aposition) :
				→
--------------------------------
===			# void ajouterStatusCube(Message* amessage, unsigned int &aposition) :
				→
--------------------------------

	~~~~~~~~~~
	Concevoir et développer les nouvelles méthodes :
	~~~~~~~~~~
		
