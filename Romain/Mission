°°° : FAIT
=== : A FAIRE
@@@ : COMPLIQUÉ OU PROBLÈME

Enregistrer les données de mission :
	Analyser les classes SegmentVol, Ordinateur, Stockage et Reboot :
--------SegmentVol :
°°°			+ SegmentVol() :
				→ Construire un SegmentVol
				→ Affecter la valeur du constructeur Horloge() à horloge
				→ Affecter la valeur du constructeur Temperature() à temperature
				→ Affecter la valeur du constructeur CameraIR() à cameraIR
				→ Affecter la valeur du constructeur Batterie() à batterie
				→ Affecter la valeur du constructeur EmetteurRecepteur() à emetteurRecepteur
				→ Affecter la valeur du constructeur Mission() à mission
				→ Affecter la valeur du constructeur Ordinateur() à ordinateur
				→ Affecter la valeur du constructeur Etat() à etat
				→ Affecter la valeur du constructeur SegmentVol() à segmentVol
°°°			+ virtual ~SegmentVol() :
				→ Détruire un SegmentVol
@@@			+ void lancerMission() :
				→ 
@@@			+ void arretMission() :
				→ 
@@@			+ void obtenirStatus(list<string>* appareil) :
				→ 
@@@			+ void obtenirStatus() :
				→ 
@@@			+ void effectuerMesure(string mesure) :
				→ 
°°°			+ void creerMission(short, short, string, string) :
				→ Appeler la méthode setDuration() de mission prenant en paramètre le paramètre duree de la méthode configureRecupEtat
				→ Appeler la méthode setPeriodicity() de mission prenant en paramètre le paramètre periode de la méthode configureRecupEtat
				→ Appeler la méthode setStartTime() de mission prenant en paramètre le paramètre debut de la méthode configureRecupEtat
				→ Appeler la méthode setMeasureType() de mission prenant en paramètre le paramètre type de la méthode configureRecupEtat
°°°			+ void activerModuleEmission() :
				→ Appeler la méthode activerEmetteur() de emetteurRecepteur
°°°			+ void activerInstrument() :
				→ Appeler la méthode activer() de cameraIR
°°°			+ void desactiverInstrument() :
				→ Appeler la méthode desactiver() de cameraIR
°°°			+ void desactiverModuleEmission() :
				→ Appeler la méthode desactiverEmetteur() de emetteurRecepteur
°°°			+ void setSegmentSol(SegmentSol* segmentSol) : ( dans segmentVol.h )
				→ Affecter la valeur de segmentSol qui est le paramètre de la méthode setSegmentSol à segmentSol
°°°			+ void configurerRecupEtat(short period, list<string> instrument) :
				→ Appeler la méthode setAppareil() de etat prenant en paramètre le paramètre instrument de la méthode configureRecupEtat
				→ Appeler la méthode setPeriodicity() de etat prenant en paramètre le paramètre period de la méthode configureRecupEtat
OK			+ thread recupEtat() :
				→ Retourner le numéro du thread créé qui fait appel à la méthode obtenirStatus()
OK			+ thread tLancerMission() :
				→ Retourner le numéro du thread créé qui fait appel à la méthode lancerMission()
OK			+ thread tArretMission() :
				→ Retourner le numéro du thread créé qui fait appel à la méthode arretMission()
°°°			+ Horloge* getHorloge() :
				→ Retourner horloge
°°°			+ Temperature* getTemperature() :
				→ Retourner temperature
°°°			+ CameraIR* getCameraIR() :
				→ Retourner cameraIR
°°°			+ Batterie* getBatterie() :
				→ Retourner batterie
°°°			+ EmetteurRecepteur* getEmetteurRecepteur() :
				→ Retourner emetteurRecepteur
°°°			+ Mission* getMission() :
				→ Retourner mission
°°°			+ Ordinateur* getOrdinateur() :
				→ Retourner ordinateur
°°°			+ Etat* getEtat() :
				→ Retourner etat
°°°			+ unsigned char getIdentifiant() :
				→ Retourner identifiant
°°°			+ void setIdentifiant(unsigned char id) :
				→ Affecter la valeur de id à identifiant
--------Ordinateur :
			+ Ordinateur() :
				→ Construire un Ordinateur
				→ Affecter la valeur du constructeur Stockage() à leStockage
				→ Affecter la valeur du constructeur Reboot() à leReboot
			+ virtual ~Ordinateur() :
				→ Détruire un Ordinateur
			+ void obtenirStatus() :
				→ Appeler la méthode calculerStockage()
				→ Appeler la méthode obtenirTemperature()
			+ Stockage * getStockage() :
				→ Retourner leStockage
			+ float getTemperatureProcessor() :
				→ Retourner temperatureProcessor
			+ Reboot* getReboot() :
				→ Retourner leReboot
			- void calculerStockage() :
				→ Appeler la méthode calculMemoireUSD() de leStockage
				→ Appeler la méthode calculMemoireRAM() de leStockage
			- void obtenirTemperature() :
				→ Ouvrir le fichier contenant la température
				→ Afficher un message d'erreur si le fichier ne peut pas être ouvert
				→ Affecter la valeur de la température divisée par 1000 contenue dans le fichier contenant la température à temperatureProcessor
--------Stockage :
°°°			+ Stockage() :
				→ Construire un Stockage
				→ Affecter "666666" à memoireRam
				→ Affecter "1888888" à memoireUSD
				→ Affecter "66" à pourcentageutilise
				→ Affecter "77" à occupationRAM
				→ Affecter "ko" à unit
°°°			+ virtual ~Stockage() :
				→ Détruire un stockage
@@@			+ void calculMemoireUSD() :
				→ 
@@@			+ void calculMemoireRAM() :
				→ 
°°°			+ string getMemoireRAM() :
				→ Retourner memoireRAM
°°°			+ string getMemoireUSD() :
				→ Retourner memoireUSD
°°°			+ string getPourcentage() :
				→ Retourner pourcentageutilise
°°°			+ string getOccupationRAM() :
				→ Retourner occupationRAM
°°°			+ string getUnit() :
				→ Retourner unit
===			- FILE * ouvrirAccesUSD() :
				→ /////
				→ Retourner fichierUSD
===			- FILE * ouvrirAccesRAM() :
				→ /////
				→ Retourner fichierRAM
@@@			- string lectureLigneUSD(FILE * pFile) :
				→ 
@@@			- string lectureLigneRAM(FILE * pFile) :
				→ 
===			- string trouverPositionUSD(string str) :
				→ /////
				→ Retourner memoirefreeUSD
===			- string trouverPositionRAM(string str) :
				→ /////
				→ Retourner memoirefreeRAM
--------Reboot :
			+ Reboot() :
				→ Construire un Reboot
				→ Affecter "0000/00/00 00:00:00" à dateHour
				→ Affecter 0 à number
			+ Reboot(int anbreReboot, string adateHeure) :
				→ Affecter la valeur de adateHeure qui est le paramètre de la méthode Reboot à dateHour
				→ Affecter la valeur de anbreReboot qui est le paramètre de la méthode Reboot à number
			+ int getNumber() :
				→ Retourner number
			+ string getDateHour() :
				→ Retourner dateHour
			+ void setDateHour(string adateHour) :
				→ Affecter la valeur de adateHeure qui est le paramètre de la méthode setDateHour à dateHour
°°°			+ void setNumber(int anumber) :
				→ Affecter la valeur de anumber qui est le paramètre de la méthode setNumber à number
	Établir comment les classes interviendront dans le cas de la sauvegarde de missions avant envoi :
--------SegmentVol :
--------Ordinateur :
--------Stockage :
--------Reboot :
--------Protocole :
	Identifier le format des données à enregistrer :
--------Caméra :
			- PAS AU SPRINT 1
--------Caméra IR :
			- A FAIRE DURANT LE SPRINT 1
--------Magnétomètre :
			- PAS AU SPRINT 1
	Concevoir et réaliser le module de sauvegarde des données de mission :
	Concevoir et réaliser le module de redémarrage du système sur commande ou sur incident :
Transmettre les télémesures d’instrument :
	Analyser la classe Protocole et vérifier l’adaptabilité des méthodes de transmission des télémesures aux différents modèles de capteurs :
--------Protocole :
°°°			+ Protocole() :
				→ Construire un Protocole
°°°			+ virtual ~Protocole() :
				→ Détruire un Protocole
===			+ char *getTableau() :
				→ 
°°°			+ int getNbrePaquets() :
				→ Retourner nbrePaquets
°°°			+ int getNumPaquet() :
				→ Retourner numPaquet
OK			+ list<vector<char>> getReceived() :
				→ Retourner received
OK			+ void setTableau(char laDataRecu[100]) :
				→ Remplir les 100 premières cases (0 à 99) du tableau tableau[i] avec les données laDataRecu[i]
===			+ void setNbrePaquets(int n) :
				→ 
===			+ void setNumPaquet(int n) :
				→ 
===			+ void addReceived(char recu [100]) :
				→ 
===			+ void detramerMessage() :
				→ 
===			+ string extraireTypeMessage(int &pos) :
				→ 
===			+ void extraireNombrePaquets(int &pos) :
				→ 
===			+ int calculerNbrePaquetsSalve() :
				→ 
===			+ string extraireTypeDataMission(int &pos) :
				→ 
===			+ int extraireDataMission(list<float> &datas, list<string> &dateHours, int &pos, string typeMission) :
				→ 
===			+ void supprimerPaquet() :
				→ 
===			# static string ERR_CHECKSUM :
				→
===			# static string ERR_FORMAT :
				→
===			# static int pause :
				→
===			# int nbrePaquets :
				→
===			# int numPaquet :
				→
===			# char tableau[100] :
				→
===			# list<vector<char>> received :
				→
===			# void calculerChecksum(char & PF, char & pf) :
				→
===			# bool verifierChecksum() :
				→
===			# void tramerMission(Message* message, int nbrePaquets, int numPaquet) :
				→
===			# void tramerStatus(Message* message, int nbrePaquets, int numPaquet) :
				→
===			# void tramerMesure(Message* message, int nbrePaquets, int numPaquet) :
				→
===			# unsigned char calculerNombrePaquets(Message * message) :
				→
OK			# void extraireCommande() :
				→ PAS CODÉ
OK			# void extraireParametres() :
				→ PAS CODÉ
===			# void ajouterDataOrdiBord(Message* amessage, unsigned int &aposition) :
				→
===			# void ajouterDataBattery(Message* amessage, unsigned int &aposition) :
				→
===			# void ajouterStatusInst(Message* amessage, unsigned int &aposition) :
				→
===			# void ajouterStatusCube(Message* amessage, unsigned int &aposition) :
				→

	Concevoir et développer les nouvelles méthodes :
