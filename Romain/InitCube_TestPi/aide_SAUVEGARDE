


CE FICHIER SERT UNIQUEMENT POUR INCLURE DES TESTS CONCERNANT LA SAUVEGARDE AFIN DE NE PAS SURCHARGER 'SAUVEGARDE.CPP'

////////////////////////////////////////////////////////////////////////////////
//////////ALGO SAUVEGARDE///////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

    Fichier présent ?
        si oui : Ecrire que le fichier XML est présent
        si non : Ecrire que le fichier XML est présent
                 Créer le fichier XML et son arborescence
    Ouvrir le fichier XML
    Ecrire chacune des valeurs dans le fichier XML
    Sauvegarder le fichier XML
    Fermer le fichier XML
////////////////////////////////////////////////////////////////////////////////
//////////ENREGISTRERMESURE()///////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

//////////SOLUTION 1 | Utilise le nom du fichier xml
// COMPILATION OUI
// FICHIER TROUVE OUI
// OUVERTURE DU FICHIER OUI
// NOM DE FICHIER AUTOMATIQUE NON

bool Sauvegarde::enregistrerMesure() {
    pugi::xml_document doc;
    if (doc.load_file("initcube.xml")) { // Si le fichier existe
        cout << "Le fichier initcube.xml est présent dans le répertoire contenant l'exécutable du projet" << endl;
        //OUVRIR LE FICHIER XML
        system("sudo nano initcube.xml");
        //INSERER LES VALEURS DANS LE FICHIER XML
        //SAUVEGARDER LE FICHIER XML
        //FERMER LE FICHIER XML
        return true;
    } else {
        cout << "Le fichier initcube.xml n'est pas présent dans le répertoire contenant l'exécutable du projet" << endl;
        //CREER LE FICHIER XML
        //OUVRIR LE FICHIER XML
        //INSERER LES VALEURS DANS LE FICHIER XML
        //SAUVEGARDER LE FICHIER XML
        //FERMER LE FICHIER XML
        return false;
    }
}

//////////SOLUTION 2 | Utilise la variable 'xmlFile'
// COMPILATION NON
// FICHIER TROUVE OUI
// OUVERTURE DU FICHIER NON
// NOM DE FICHIER AUTOMATIQUE OUI

bool Sauvegarde::enregistrerMesure() {

    pugi::xml_document doc;
    const char* xmlFile = "initcube.xml"; // POUR TEST VALIDE
    //    const char* xmlFile = "nomDuFichierInexistant.xml"; // POUR TEST ERREUR
    if (doc.load_file(xmlFile)) { // Si le fichier existe
        cout << "Le fichier xml " << xmlFile << " est présent dans le répertoire contenant l'exécutable du projet" << endl;
        //OUVRIR LE FICHIER XML
//        system("sudo nano " + xmlFile); // ERREUR DE COMPILATION
//        system("sudo nano " & xmlFile); // ERREUR DE COMPILATION
//        system("sudo nano " xmlFile); // ERREUR DE COMPILATION
//        system("sudo nano xmlFile"); // ERREUR DE COMPILATION
        //INSERER LES VALEURS DANS LE FICHIER XML
        //SAUVEGARDER LE FICHIER XML
        //FERMER LE FICHIER XML
        return true;
    } else {
        cout << "Le fichier xml " << xmlFile << " n'est pas présent dans le répertoire contenant l'exécutable du projet" << endl;
        //CREER LE FICHIER XML
        //OUVRIR LE FICHIER XML
        //INSERER LES VALEURS DANS LE FICHIER XML
        //SAUVEGARDER LE FICHIER XML
        //FERMER LE FICHIER XML
        return false;
    }
}

//////////SOLUTION 3 | Utilise la variable 'commande'
// COMPILATION OUI
// FICHIER TROUVE OUI
// OUVERTURE DU FICHIER OUI
// NOM DE FICHIER AUTOMATIQUE NON

bool Sauvegarde::enregistrerMesure() {
    pugi::xml_document doc;
    const char* commande = "sudo nano initcube.xml";
    if (doc.load_file("initcube.xml")) { // Si le fichier existe
        cout << "Le fichier initcube.xml est présent dans le répertoire contenant l'exécutable du projet" << endl;
        //OUVRIR LE FICHIER XML
        system(commande);
        //INSERER LES VALEURS DANS LE FICHIER XML
        //SAUVEGARDER LE FICHIER XML
        //FERMER LE FICHIER XML
        return true;
    } else {
        cout << "Le fichier initcube.xml n'est pas présent dans le répertoire contenant l'exécutable du projet" << endl;
        //CREER LE FICHIER XML
        //OUVRIR LE FICHIER XML
        //INSERER LES VALEURS DANS LE FICHIER XML
        //SAUVEGARDER LE FICHIER XML
        //FERMER LE FICHIER XML
        return false;
    }
}

//////////SOLUTION 4 | Utilise les variables 'xmlFile' et 'commande'
// COMPILATION OUI
// FICHIER TROUVE OUI
// OUVERTURE DU FICHIER OUI
// NOM DE FICHIER AUTOMATIQUE OUI

bool Sauvegarde::enregistrerMesure() {
    pugi::xml_document doc;
    char commande[256];
    char ouvertureFichier[] = "sudo nano";
    char xmlFile[] = "initcube.xml"; // POUR TEST VALIDE
    //    char* xmlFile[] = "nomDuFichierInexistant.xml"; // POUR TEST ERREUR
    sprintf(commande, "%s %s", ouvertureFichier, xmlFile);
    if (doc.load_file(xmlFile)) { // Si le fichier existe
        cout << "Le fichier initcube.xml est présent dans le répertoire contenant l'exécutable du projet" << endl;
        //OUVRIR LE FICHIER XML
        system(commande);
        //INSERER LES VALEURS DANS LE FICHIER XML
        //SAUVEGARDER LE FICHIER XML
        //FERMER LE FICHIER XML
        return true;
    } else {
        cout << "Le fichier initcube.xml n'est pas présent dans le répertoire contenant l'exécutable du projet" << endl;
        //CREER LE FICHIER XML
        //OUVRIR LE FICHIER XML
        //INSERER LES VALEURS DANS LE FICHIER XML
        //SAUVEGARDER LE FICHIER XML
        //FERMER LE FICHIER XML
        return false;
    }
}

//////////SOLUTION 5 | Solution 4 mais plus plus concis
// COMPILATION OUI
// FICHIER TROUVE OUI
// OUVERTURE DU FICHIER OUI
// NOM DE FICHIER AUTOMATIQUE OUI

bool Sauvegarde::enregistrerMesure() {
    pugi::xml_document doc;
    char commandeCreer[256]; // OK
    char commandeOuvrir[256]; // OK
//    char commandeInserer[256]; // PAS OK
//    char commandeSauvegarder[256]; // PAS OK
//    char commandeFermer[256]; // PAS OK
    char xmlFile[] = "initcube.xml"; // POUR TEST VALIDE
    char ouvertureFichier[] = "sudo nano";
    //    char* xmlFile[] = "nomDuFichierInexistant.xml"; // POUR TEST ERREUR
    sprintf(commandeCreer, "touch %s", xmlFile);
    sprintf(commandeOuvrir, "%s %s", ouvertureFichier, xmlFile);
    if (doc.load_file(xmlFile)) { // Si le fichier existe
        cout << "Le fichier " << xmlFile << " est présent dans le répertoire contenant l'exécutable du projet" << endl;
    } else {
        cout << "Le fichier " << xmlFile << " n'est pas présent dans le répertoire contenant l'exécutable du projet" << endl;
        //CREER LE FICHIER XML
        system(commandeCreer);
    }
    //OUVRIR LE FICHIER XML
        system(commandeOuvrir);
    //LIRE ID DANS LE FICHIER XML
        lireID();
    //INSERER LES VALEURS DANS LE FICHIER XML
//    system(commandeInserer);
    //SAUVEGARDER LE FICHIER XML
//    system(commandeSauvegarder);
    //FERMER LE FICHIER XML
//    system(commandeFermer);
    return true;
}

//////////SOLUTION FINALE
// COMPILATION OUI
// FICHIER TROUVE OUI
// NOM DE FICHIER AUTOMATIQUE OUI

bool Sauvegarde::enregistrerMesure() {
    pugi::xml_document doc;
    char commandeCreer[256]; // OK
    char xmlFile[] = "initcube.xml"; // POUR TEST VALIDE
    sprintf(commandeCreer, "touch %s", xmlFile);
    if (doc.load_file(xmlFile)) { // Si le fichier existe
        cout << "Le fichier " << xmlFile << " est présent dans le répertoire contenant l'exécutable du projet" << endl;
    } else {
        cout << "Le fichier " << xmlFile << " n'est pas présent dans le répertoire contenant l'exécutable du projet" << endl;
        //CREER LE FICHIER XML
        system(commandeCreer);
    }
    //OUVRIR LE FICHIER XML
    //INSERER LES VALEURS DANS LE FICHIER XML
    //SAUVEGARDER LE FICHIER XML
    //FERMER LE FICHIER XML
    return true;
}

////////////////////////////////////////////////////////////////////////////////
//////////AJOUTERAMISSION///////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

//////////SOLUTION 1 | 
// COMPILATION OUI

bool Sauvegarde::ajouterAMission() {
    return 0;
}

////////////////////////////////////////////////////////////////////////////////
//////////LIREID////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

//////////SOLUTION 1 | 
// COMPILATION NON (conversion de 'const char_t*' en 'unsigned char' impossible)
// ID TROUVE NON

unsigned char Sauvegarde::lireID() {
    pugi::xml_document doc;
    unsigned char cubeId;
    //LIRE L'ID DU CUBE DANS LE FICHIER XML
    cubeId = (unsigned char) doc.child("initcube").child("description").child("id").value();
    cout << "L'InitCube à pour ID le numéro " << cubeId << endl;
    return cubeId;
}

//////////SOLUTION FINALE | 
// COMPILATION OUI
// ID TROUVE OUI
// AFFICHAGE DE L'ID OUI
// CONVERSION EN UNSIGNED CHAR OUI

unsigned char Sauvegarde::lireID() {
    pugi::xml_document doc;
    char xmlFile[] = "initcube.xml";
    unsigned char cubeId;
    if (doc.load_file(xmlFile)) {
        pugi::xpath_node nodeId = doc.select_node("//initcube/description/id");
        string intermediateId = nodeId.node().child_value();
        cout << "L'InitCube a pour ID le numéro (string): " << intermediateId << endl;
        istringstream iss(intermediateId);
        int nb;
        iss >> nb;
        cubeId = (unsigned char) nb;
        cout << "L'InitCube a pour ID le numéro (int): " << (int) cubeId << endl;
    } else {
        cout << "L'InitCube n'a pas d'Id" << endl;
        cubeId = 0;
    }
    return cubeId;
}

//CREER UN FICHIER XML
system("touch nomDuFichier.xml");

//SAUVEGARDER UN FICHIER XML
?????

//FERMER UN FICHIER XML
?????